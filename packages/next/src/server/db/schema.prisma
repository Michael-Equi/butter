generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime  @default(now())
  modifiedAt DateTime  @default(now())
  email      String    @unique
  projectIds String[] @db.ObjectId
  projects   Project[] @relation(fields: [projectIds], references: [id])
  name       String?
}

model Project {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  name       String
  slug       String   @unique

  userIds   String[] @db.ObjectId
  users      User[]  @relation(fields: [userIds], references: [id])

  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  testRuns TestRun[]
}

enum SentimentDifference {
  Plus
  Minus
}

model TestRun {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  name       String
  configFile String
  testsFile String
  tags String?
  averageSimilarity Float?
  jaccardSimilarity Float?
  sentimentExpected Float? // -1 to 1
  sentimentReturned Float? // -1 to 1

  projectId   String   @db.ObjectId
  project     Project  @relation(fields: [projectId], references: [id])

  tests      Test[]
}

type TestResult {
  input String[]
  output String[]
  data Json?
  semanticSimilarity Float
}

model Test {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  title String
  description String
  topFiveWords String[] @default([])
  results TestResult[]

  testRunId String @db.ObjectId
  testRun TestRun @relation(fields: [testRunId], references: [id])
}