type Mutation {
  createProject(name: String!, slug: String): Project
  createStripeCheckoutBillingPortalUrl(projectId: String!): String
  createStripeCheckoutSession(plan: PaidPlan!, projectId: String!): String
  inviteToProject(email: String!, projectId: String!): Boolean
  removeUserFromProject(projectId: String!, userId: String!): Project
  updateUser(name: String, userId: String!): User
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

enum PaidPlan {
  pro
}

type Project {
  id: String!
  name: String
  paidPlan: PaidPlan
  slug: String
  testRuns(after: String, before: String, first: Int, last: Int): ProjectTestRunsConnection!
  users(after: String, before: String, first: Int, last: Int): ProjectUsersConnection!
}

type ProjectTestRunsConnection {
  edges: [ProjectTestRunsConnectionEdge]!
  pageInfo: PageInfo!
}

type ProjectTestRunsConnectionEdge {
  cursor: String!
  node: TestRun!
}

type ProjectUsersConnection {
  edges: [ProjectUsersConnectionEdge]!
  pageInfo: PageInfo!
}

type ProjectUsersConnectionEdge {
  cursor: String!
  node: User!
}

type Query {
  currentUser: User
  project(id: String, slug: String): Project
  test(id: String): Test
  testRun(id: String): TestRun
}

type Test {
  averageExpectedSentiment: Float
  averageJaccardSimilarity: Float
  averageSemanticSimilarity: Float
  averageTestSentiment: Float
  cases: [TestResult!]!
  description: String!
  id: String!
  title: String!
}

type TestResult {
  expected: [String!]!
  expectedSentiment: Float
  inputs: [String!]!
  jaccardSimilarity: Float
  outputs: [String!]!
  semanticSimilarity: Float
  testSentiment: Float
}

type TestRun {
  averageExpectedSentiment: Float
  averageJaccardSimilarity: Float
  averageSemanticSimilarity: Float
  averageTestSentiment: Float
  branch: String!
  commitId: String!
  configFile: String
  createdAt: Float!
  id: String!
  name: String!
  project: Project!
  tags: String
  tests(after: String, before: String, first: Int, last: Int): TestRunTestsConnection!
  testsFile: String
}

type TestRunTestsConnection {
  edges: [TestRunTestsConnectionEdge]!
  pageInfo: PageInfo!
}

type TestRunTestsConnectionEdge {
  cursor: String!
  node: Test!
}

type User {
  email: String!
  id: String!
  name: String
  projects(after: String, before: String, first: Int, last: Int): UserProjectsConnection!
}

type UserProjectsConnection {
  edges: [UserProjectsConnectionEdge]!
  pageInfo: PageInfo!
}

type UserProjectsConnectionEdge {
  cursor: String!
  node: Project!
}